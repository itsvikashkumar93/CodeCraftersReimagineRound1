var VanillaTilt = (function () {
    "use strict";

    class VanillaTilt {
        constructor(element, options = {}) {
            if (!(element instanceof Node)) {
                throw "Can't initialize VanillaTilt because " + element + " is not a Node.";
            }

            this.width = null;
            this.height = null;
            this.clientWidth = null;
            this.clientHeight = null;
            this.left = null;
            this.top = null;
            this.gammazero = null;
            this.betazero = null;
            this.lastgammazero = null;
            this.lastbetazero = null;
            this.transitionTimeout = null;
            this.updateCall = null;
            this.event = null;

            this.updateBind = this.update.bind(this);
            this.resetBind = this.reset.bind(this);

            this.element = element;
            this.settings = this.extendSettings(options);
            this.reverse = this.settings.reverse ? -1 : 1;
            this.glare = VanillaTilt.isSettingTrue(this.settings.glare);
            this.glarePrerender = VanillaTilt.isSettingTrue(this.settings["glare-prerender"]);
            this.fullPageListening = VanillaTilt.isSettingTrue(this.settings["full-page-listening"]);
            this.gyroscope = VanillaTilt.isSettingTrue(this.settings.gyroscope);
            this.gyroscopeSamples = this.settings.gyroscopeSamples;

            this.elementListener = this.getElementListener();

            if (this.glare) {
                this.prepareGlare();
            }

            if (this.fullPageListening) {
                this.updateClientSize();
            }

            this.addEventListeners();
            this.updateInitialPosition();
        }

        static isSettingTrue(value) {
            return value === "" || value === true || value === 1;
        }

        getElementListener() {
            if (this.fullPageListening) {
                return window.document;
            }

            if (typeof this.settings["mouse-event-element"] === "string") {
                const mouseEventElement = document.querySelector(this.settings["mouse-event-element"]);
                if (mouseEventElement) {
                    return mouseEventElement;
                }
            }

            return this.settings["mouse-event-element"] instanceof Node ? this.settings["mouse-event-element"] : this.element;
        }

        addEventListeners() {
            this.onMouseEnterBind = this.onMouseEnter.bind(this);
            this.onMouseMoveBind = this.onMouseMove.bind(this);
            this.onMouseLeaveBind = this.onMouseLeave.bind(this);
            this.onWindowResizeBind = this.onWindowResize.bind(this);
            this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this);

            this.elementListener.addEventListener("mouseenter", this.onMouseEnterBind);
            this.elementListener.addEventListener("mouseleave", this.onMouseLeaveBind);
            this.elementListener.addEventListener("mousemove", this.onMouseMoveBind);

            if (this.glare || this.fullPageListening) {
                window.addEventListener("resize", this.onWindowResizeBind);
            }

            if (this.gyroscope) {
                window.addEventListener("deviceorientation", this.onDeviceOrientationBind);
            }
        }

        removeEventListeners() {
            this.elementListener.removeEventListener("mouseenter", this.onMouseEnterBind);
            this.elementListener.removeEventListener("mouseleave", this.onMouseLeaveBind);
            this.elementListener.removeEventListener("mousemove", this.onMouseMoveBind);

            if (this.gyroscope) {
                window.removeEventListener("deviceorientation", this.onDeviceOrientationBind);
            }

            if (this.glare || this.fullPageListening) {
                window.removeEventListener("resize", this.onWindowResizeBind);
            }
        }

        destroy() {
            clearTimeout(this.transitionTimeout);
            if (this.updateCall !== null) {
                cancelAnimationFrame(this.updateCall);
            }

            this.reset();
            this.removeEventListeners();

            this.element.vanillaTilt = null;
            delete this.element.vanillaTilt;
            this.element = null;
        }

        onDeviceOrientation(event) {
            if (event.gamma === null || event.beta === null) {
                return;
            }

            this.updateElementPosition();

            if (this.gyroscopeSamples > 0) {
                this.lastgammazero = this.gammazero;
                this.lastbetazero = this.betazero;

                if (this.gammazero === null) {
                    this.gammazero = event.gamma;
                    this.betazero = event.beta;
                } else {
                    this.gammazero = (event.gamma + this.lastgammazero) / 2;
                    this.betazero = (event.beta + this.lastbetazero) / 2;
                }

                this.gyroscopeSamples -= 1;
            }

            const gammaDifference = this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX;
            const betaDifference = this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY;

            const gammaSensitivity = gammaDifference / this.width;
            const betaSensitivity = betaDifference / this.height;

            const tiltX = (event.gamma - (this.settings.gyroscopeMinAngleX + this.gammazero)) / gammaSensitivity;
            const tiltY = (event.beta - (this.settings.gyroscopeMinAngleY + this.betazero)) / betaSensitivity;

            if (this.updateCall !== null) {
                cancelAnimationFrame(this.updateCall);
            }

            this.event = {
                clientX: tiltX + this.left,
                clientY: tiltY + this.top
            };

            this.updateCall = requestAnimationFrame(this.updateBind);
        }

        onMouseEnter() {
            this.updateElementPosition();
            this.element.style.willChange = "transform";
            this.setTransition();
        }

        onMouseMove(event) {
            if (this.updateCall !== null) {
                cancelAnimationFrame(this.updateCall);
            }

            this.event = event;
            this.updateCall = requestAnimationFrame(this.updateBind);
        }

        onMouseLeave() {
            this.setTransition();
            if (this.settings.reset) {
                requestAnimationFrame(this.resetBind);
            }
        }

        reset() {
            this.event = {
                clientX: this.left + this.width / 2,
                clientY: this.top + this.height / 2
            };

            if (this.element && this.element.style) {
                this.element.style.transform = `perspective(${this.settings.perspective}px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)`;
            }

            this.resetGlare();
        }

        resetGlare() {
            if (this.glare) {
                this.glareElement.style.transform = "rotate(180deg) translate(-50%, -50%)";
                this.glareElement.style.opacity = "0";
            }
        }

        updateInitialPosition() {
            if (this.settings.startX === 0 && this.settings.startY === 0) {
                return;
            }

            this.onMouseEnter();

            if (this.fullPageListening) {
                this.event = {
                    clientX: (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.clientWidth,
                    clientY: (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.clientHeight
                };
            } else {
                this.event = {
                    clientX: this.left + (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.width,
                    clientY: this.top + (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.height
                };
            }

            let scaleValue = this.settings.scale;
            this.settings.scale = 1;
            this.update();
            this.settings.scale = scaleValue;
            this.resetGlare();
        }

        getValues() {
            let x, y;

            if (this.fullPageListening) {
                x = this.event.clientX / this.clientWidth;
                y = this.event.clientY / this.clientHeight;
            } else {
                x = (this.event.clientX - this.left) / this.width;
                y = (this.event.clientY - this.top) / this.height;
            }

            x = Math.min(Math.max(x, 0), 1);
            y = Math.min(Math.max(y, 0), 1);

            const tiltX = (this.reverse * (this.settings.max - x * this.settings.max * 2)).toFixed(2);
            const tiltY = (this.reverse * (y * this.settings.max * 2 - this.settings.max)).toFixed(2);
            const percentageX = 100 * x;
            const percentageY = 100 * y;
            const angle = Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) * (180 / Math.PI);

            return {
                tiltX,
                tiltY,
                percentageX,
                percentageY,
                angle
            };
        }

        updateElementPosition() {
            const rect = this.element.getBoundingClientRect();
            this.width = this.element.offsetWidth;
            this.height = this.element.offsetHeight;
            this.left = rect.left;
            this.top = rect.top;
        }

        update() {
            const values = this.getValues();

            this.element.style.transform = `perspective(${this.settings.perspective}px) rotateX(${this.settings.axis === 'x' ? 0 : values.tiltY}deg) rotateY(${this.settings.axis === 'y' ? 0 : values.tiltX}deg) scale3d(${this.settings.scale}, ${this.settings.scale}, ${this.settings.scale})`;

            if (this.glare) {
                this.glareElement.style.transform = `rotate(${values.angle}deg) translate(-50%, -50%)`;
                this.glareElement.style.opacity = `${values.percentageY * this.settings["max-glare"] / 100}`;
            }

            this.element.dispatchEvent(new CustomEvent("tiltChange", {
                detail: values
            }));

            this.updateCall = null;
        }

        prepareGlare() {
            if (!this.glarePrerender) {
                const glare = document.createElement("div");
                glare.classList.add("js-tilt-glare");

                const glareInner = document.createElement("div");
                glareInner.classList.add("js-tilt-glare-inner");

                glare.appendChild(glareInner);
                this.element.appendChild(glare);
            }

            this.glareElementWrapper = this.element.querySelector(".js-tilt-glare");
            this.glareElement = this.element.querySelector(".js-tilt-glare-inner");

            if (!this.glarePrerender) {
                Object.assign(this.glareElementWrapper.style, {
                    position: "absolute",
                    top: "0",
                    left: "0",
                    width: "100%",
                    height: "100%",
                    overflow: "hidden",
                    "pointer-events": "none"
                });

                Object.assign(this.glareElement.style, {
                    position: "absolute",
                    top: "50%",
                    left: "50%",
                    "pointer-events": "none",
                    "background-image": "linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)",
                    width: `${2 * this.element.offsetWidth}px`,
                    height: `${2 * this.element.offsetWidth}px`,
                    transform: "rotate(180deg) translate(-50%, -50%)",
                    "transform-origin": "0% 0%",
                    opacity: "0"
                });
            }
        }

        updateGlareSize() {
            if (this.glare) {
                Object.assign(this.glareElement.style, {
                    width: `${2 * this.element.offsetWidth}px`,
                    height: `${2 * this.element.offsetWidth}px`
                });
            }
        }

        updateClientSize() {
            this.clientWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            this.clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        }

        onWindowResize() {
            this.updateGlareSize();
            this.updateClientSize();
        }

        setTransition() {
            clearTimeout(this.transitionTimeout);

            this.element.style.transition = `${this.settings.speed}ms ${this.settings.easing}`;

            if (this.glare) {
                this.glareElement.style.transition = `opacity ${this.settings.speed}ms ${this.settings.easing}`;
            }

            this.transitionTimeout = setTimeout(() => {
                this.element.style.transition = "";
                if (this.glare) {
                    this.glareElement.style.transition = "";
                }
            }, this.settings.speed);
        }

        extendSettings(options) {
            const defaultSettings = {
                reverse: false,
                max: 15,
                startX: 0,
                startY: 0,
                perspective: 1000,
                easing: "cubic-bezier(.03,.98,.52,.99)",
                scale: 1,
                speed: 300,
                transition: true,
                axis: null,
                glare: false,
                "max-glare": 1,
                "glare-prerender": false,
                "full-page-listening": false,
                "mouse-event-element": null,
                reset: true,
                gyroscope: true,
                gyroscopeMinAngleX: -45,
                gyroscopeMaxAngleX: 45,
                gyroscopeMinAngleY: -45,
                gyroscopeMaxAngleY: 45,
                gyroscopeSamples: 10
            };

            let settings = {};

            for (let key in defaultSettings) {
                if (key in options) {
                    settings[key] = options[key];
                } else if (this.element.hasAttribute(`data-tilt-${key}`)) {
                    let attributeValue = this.element.getAttribute(`data-tilt-${key}`);
                    try {
                        settings[key] = JSON.parse(attributeValue);
                    } catch (e) {
                        settings[key] = attributeValue;
                    }
                } else {
                    settings[key] = defaultSettings[key];
                }
            }

            return settings;
        }

        static init(elements, options) {
            if (elements instanceof Node) {
                elements = [elements];
            }

            if (elements instanceof NodeList || elements instanceof Array) {
                elements.forEach(element => {
                    if (!('vanillaTilt' in element)) {
                        element.vanillaTilt = new VanillaTilt(element, options);
                    }
                });
            }
        }
    }

    if (typeof document !== "undefined") {
        window.VanillaTilt = VanillaTilt;
        VanillaTilt.init(document.querySelectorAll("[data-tilt]"));
    }

    return VanillaTilt;
})();
